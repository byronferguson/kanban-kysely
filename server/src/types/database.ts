import {
  ColumnType,
  Generated,
  Insertable,
  Selectable,
  Updateable,
} from 'kysely';

type CreatedAtColumn = ColumnType<Date, string | undefined, never>;
type UpdatedAtColumn = ColumnType<Date, string | undefined, string | undefined>;

export interface Database {
  users: UserTable;
  tickets: TicketTable;
}

interface UserTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;

  username: string;

  password: string;

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  createdAt: ColumnType<Date, string | undefined, never>;

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  updatedAt: ColumnType<Date, string | undefined, string | undefined>;
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
//
// Most of the time you should trust the type inference and not use explicit
// types at all. These types can be useful when typing function arguments.
export type User = Selectable<UserTable>;
export type NewUser = Insertable<UserTable>;
export type UserUpdate = Updateable<UserTable>;

interface TicketTable {
  id: Generated<number>;

  name: string;

  status: 'todo' | 'in-progress' | 'done';

  description: string;

  assignedUserId: number | null;

  createdAt: CreatedAtColumn;

  updatedAt: UpdatedAtColumn;
}

export type Ticket = Selectable<TicketTable>;
export type NewTicket = Insertable<TicketTable>;
export type TicketUpdate = Updateable<TicketTable>;
