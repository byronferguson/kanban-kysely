import { C12InputConfig } from 'c12';
import { PartialDeep } from 'type-fest';
import { Kysely, Dialect, KyselyPlugin, Migrator, MigrationProvider, MigratorProps, SqliteDialectConfig, MysqlDialectConfig, PostgresDialectConfig, MssqlDialectConfig, Migration } from 'kysely';
import { PostgresJSDialectConfig } from 'kysely-postgres-js';

declare class Seeder {
    #private;
    constructor(props: SeederProps);
    getSeeds(seedNames?: string | string[]): Promise<SeedInfo[]>;
    run(seedNames?: string | string[]): Promise<SeedResultSet>;
}
interface Seed {
    seed(db: Kysely<any>): Promise<void>;
}
interface SeedProvider {
    getSeeds(seedNames?: string | string[]): Promise<Record<string, Seed>>;
}
interface SeederProps {
    db: Kysely<any>;
    provider: SeedProvider;
}
interface SeedInfo {
    name: string;
    seed: Seed;
}
interface SeedResultSet {
    readonly error?: unknown;
    readonly results: SeedResult[];
}
interface SeedResult {
    readonly seedName: string;
    readonly status: 'Success' | 'Error' | 'NotExecuted';
}

type KyselyDialect = KyselyCoreDialect | KyselyOrganizationDialect | Dialect;
type ResolvableKyselyDialect = KyselyCoreDialect | KyselyOrganizationDialect;
type KyselyCoreDialect = 'pg' | 'mysql2' | 'tedious' | 'better-sqlite3';
type KyselyOrganizationDialect = 'postgres';
interface KyselyDialectConfigDictionary extends Record<ResolvableKyselyDialect, unknown> {
    'better-sqlite3': SqliteDialectConfig;
    mysql2: MysqlDialectConfig;
    pg: PostgresDialectConfig;
    postgres: PostgresJSDialectConfig;
    tedious: MssqlDialectConfig;
}
type KyselyDialectConfig<Dialect extends KyselyDialect> = Dialect extends ResolvableKyselyDialect ? KyselyDialectConfigDictionary[Dialect] : never;
type KyselyCTLConfig<Dialect extends KyselyDialect = KyselyDialect> = Dialect extends ResolvableKyselyDialect ? {
    dialect: Dialect;
    dialectConfig: KyselyDialectConfig<Dialect>;
    migrations: MigratorfulMigrationsConfig;
    plugins?: KyselyPlugin[];
    seeds?: SeederlessSeedsConfig;
} | {
    dialect: Dialect;
    dialectConfig: KyselyDialectConfig<Dialect>;
    migrations?: MigratorlessMigrationsConfig;
    plugins?: KyselyPlugin[];
    seeds: SeederfulSeedsConfig;
} | {
    dialect: Dialect;
    dialectConfig: KyselyDialectConfig<Dialect>;
    migrations?: MigratorlessMigrationsConfig;
    plugins?: KyselyPlugin[];
    seeds?: SeederlessSeedsConfig;
} : {
    dialect: Dialect;
    migrations: MigratorfulMigrationsConfig;
    plugins?: KyselyPlugin[];
    seeds?: SeederlessSeedsConfig;
} | {
    dialect: Dialect;
    migrations?: MigratorlessMigrationsConfig;
    plugins?: KyselyPlugin[];
    seeds: SeederfulSeedsConfig;
} | {
    dialect: Dialect;
    migrations?: MigratorlessMigrationsConfig;
    plugins?: KyselyPlugin[];
    seeds?: SeederlessSeedsConfig;
} | {
    kysely: Kysely<any>;
    migrations: MigratorfulMigrationsConfig;
    seeds?: SeederlessSeedsConfig;
} | {
    kysely: Kysely<any>;
    migrations?: MigratorlessMigrationsConfig;
    seeds: SeederfulSeedsConfig;
} | {
    kysely: Kysely<any>;
    migrations?: MigratorlessMigrationsConfig;
    seeds?: SeederlessSeedsConfig;
} | {
    dialect?: never;
    kysely?: never;
    migrations: MigratorfulMigrationsConfig;
    plugins?: never;
    seeds: SeederfulSeedsConfig;
};
type MigratorfulMigrationsConfig = Pick<MigrationsBaseConfig, 'getMigrationPrefix'> & {
    allowJS?: never;
    migrationFolder?: never;
    migrator: Migrator;
    provider?: never;
};
type MigratorlessMigrationsConfig = MigrationsBaseConfig & ({
    allowJS?: boolean;
    migrationFolder?: string;
    migrator?: never;
    provider?: never;
} | {
    allowJS?: never;
    migrationFolder?: never;
    migrator?: never;
    provider: MigrationProvider;
});
type SeederfulSeedsConfig = Pick<SeedsBaseConfig, 'getSeedPrefix'> & {
    allowJS?: never;
    provider?: never;
    seeder: Seeder;
    seedFolder?: never;
};
type SeederlessSeedsConfig = SeedsBaseConfig & ({
    allowJS?: boolean;
    provider?: never;
    seeder?: never;
    seedFolder?: string;
} | {
    allowJS?: never;
    provider: SeedProvider;
    seeder?: never;
    seedFolder?: never;
});
type MigrationsBaseConfig = Omit<MigratorProps, 'db' | 'provider'> & {
    getMigrationPrefix?(): string | Promise<string>;
};
type SeedsBaseConfig = Omit<SeederProps, 'db' | 'provider'> & {
    getSeedPrefix?(): string | Promise<string>;
};

type DefineConfigInput = KyselyCTLConfig & C12InputConfig<PartialDeep<KyselyCTLConfig>>;
declare const defineConfig: (input: DefineConfigInput) => DefineConfigInput;

/**
 * An opinionated migration provider that reads migrations from TypeScript files.
 * Same as `FileMigrationProvider` but works in ESM/CJS without loader flag/s,
 * and on Windows too.
 */
declare class TSFileMigrationProvider implements MigrationProvider {
    #private;
    constructor(props: TSFileMigrationProviderProps);
    getMigrations(): Promise<Record<string, Migration>>;
}
interface TSFileMigrationProviderProps {
    allowJS?: boolean;
    migrationFolder: string;
}

declare class FileSeedProvider implements SeedProvider {
    #private;
    constructor(props: FileSeedProviderProps);
    getSeeds(seedNames?: string | string[]): Promise<Record<string, Seed>>;
}
interface FileSeedProviderProps {
    allowJS?: boolean;
    seedFolder: string;
}

declare function getKnexTimestampPrefix(): string;

export { type DefineConfigInput, FileSeedProvider, type FileSeedProviderProps, type KyselyCTLConfig, type KyselyCoreDialect, type KyselyDialect, type KyselyDialectConfig, type KyselyOrganizationDialect, type MigrationsBaseConfig, type ResolvableKyselyDialect, type Seed, type SeedInfo, type SeedProvider, type SeedResult, type SeedResultSet, Seeder, type SeederProps, type SeedsBaseConfig, TSFileMigrationProvider, type TSFileMigrationProviderProps, defineConfig, getKnexTimestampPrefix };
